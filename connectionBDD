package SGBD;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


    /**
     * @description : Permet de creer un objet SGBD permettant le lien avec notre BDD
     */	
public class Sgbd {
	private static final String configurationFile = "src/SGBD/BD.properties";
	private final String jdbcDriver;
	private final String dbUrl;
	private final String username;
	private final String password;
	private final DatabaseAccessProperties dap = new DatabaseAccessProperties(configurationFile);


    /**
     * @description : Permet de creer un objet SGBD permettant le lien avec notre BDD
     */	
	public Sgbd() throws ClassNotFoundException{
                        //recupération des propriétés paramétrées
			this.jdbcDriver= dap.getJdbcDriver();
			this.dbUrl= dap.getDatabaseUrl();
			username= dap.getUsername();
			this.password= dap.getPassword();
			// Chargement des drivers de la base
			Class.forName(jdbcDriver) ;
			
	}

    /**
     * @description : Permet d'ouvrir une connexion au SGBD
     * @return : une connexion au SGBD
     */
	public Connection openConnexionsgbd() throws SQLException {
		Connection conn = DriverManager.getConnection(dbUrl, username, password);
		return conn;
	}

    /**
     * @param conn : Une connexion ouverte au SGBD que l'on souhaite fermer 
     * @description : Permet de fermer une connexion au SGBD
     */
	public static void closeConnexionsgbd(Connection conn) throws SQLException {
		SQLWarningsExceptions.printWarnings(conn);
		conn.close() ;
	}
}

package SGBD;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

/**
* @description : Permet de parser le fichier BD.properties afin d'en extraire les informations
*/
public class DatabaseAccessProperties {
	private Properties prop = new Properties();
	private String jdbcDriver;
	private String dbUrl;
	private String username, password;
    /**
     * @description : Permet de parser le fichier BD.properties afin d'en extraire les informations
     * @param propertiesFile : le fichier de propriétés à analyser
     * @require FileNotFoundException : exist(propertiesFile)
     * @require IOException : Nous devons avoir accès à la lecture du fichier de propriétés
     */
	public DatabaseAccessProperties(String propertiesFile) {
		try {
			prop = new Properties();
			prop.load(new FileInputStream(propertiesFile));
		} catch (FileNotFoundException e) {
			System.err.println( "FileNotFoundException: " + e.getMessage()) ;
			e.printStackTrace();
			return;
		} catch (IOException e) {
			System.err.println( "IOException: " + e.getMessage()) ;
			e.printStackTrace();
			return;
		}
		jdbcDriver = prop.getProperty("jdbc.driver");
                dbUrl = prop.getProperty("database.url");
                username = prop.getProperty("database.username");
                password = prop.getProperty("database.password");
	}
	
	public String getJdbcDriver() { return jdbcDriver; }
	public String getDatabaseUrl() { return dbUrl; }
	public String getUsername() { return username; }
	public String getPassword() { return password; }
}


BD.properties
################################################
# Database access properties
################################################
# JDBC driver
jdbc.driver= oracle.jdbc.OracleDriver
# Databse URL
database.url= jdbc:oracle:thin:@im2ag-oracle.e.ujf-grenoble.fr:1521:im2ag
# Username and password to access the database
database.username=noeljul
database.password=J6TciBcj2s
